# database init, supports mysql too
database=oracle
spring.datasource.platform=oracle
spring.datasource.initialization-mode=always
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

# Create database contents
# Only load example database contents, JPA creates schema
#spring.datasource.schema=classpath*:db/${database}/schema.sql
spring.datasource.data=classpath*:db/${database}/data.sql

# Run on Weblogic
#spring.datasource.jndi-name=jdbc/petclinic

# Run on Tomcat
spring.datasource.url= ${DB_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}


# Web
spring.thymeleaf.mode=HTML

# JPA
# Let JPA create database schema and drop it afterwards
spring.jpa.hibernate.ddl-auto=create-drop
# Choose JPA database dialect
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.use_sql_comments=true
#spring.jpa.properties.hibernate.format_sql=true

# Internationalization
spring.messages.basename=messages/messages

# Actuator / Management
management.endpoints.web.base-path=/manage
management.endpoints.web.exposure.include=*

# Logging
logging.level.org.springframework=INFO
#logging.level.org.hibernate.SQL=INFO
#logging.level.org.hibernate.type.descriptor.sql=TRACE
#logging.level.org.springframework.web=DEBUG
#logging.level.org.springframework.context.annotation=TRACE

# Maximum time static resources should be cached
spring.resources.cache.cachecontrol.max-age=12h
